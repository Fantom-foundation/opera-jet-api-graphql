# Root schema definition
schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

# Entry points for querying the API
type Query {
    # State represents the current state of the blockchain and network.
    state: CurrentState!

    # Total number of accounts active on the Opera blockchain.
    accountsActive:Long!

    # Get an Account information by hash address.
    account(address:Address!):Account!

    # Get list of Contracts with at most <count> edges.
    # If <count> is positive, return edges after the cursor,
    # if negative, return edges before the cursor.
    # For undefined cursor, positive <count> starts the list from top,
    # negative <count> starts the list from bottom.
    # ValidatedOnly specifies if the list should contain all the Contracts,
    # or just contracts with validated byte code and available source/ABI.
    contracts(validatedOnly: Boolean = false, cursor:Cursor, count:Int!):ContractList!

    # Get block information by number or by hash.
    # If neither is provided, the most recent block is given.
    block(number:Long, hash: Hash):Block

    # Get transaction information for given transaction hash.
    transaction(hash:Hash!):Transaction

    # Get list of Blocks with at most <count> edges.
    # If <count> is positive, return edges after the cursor,
    # if negative, return edges before the cursor.
    # For undefined cursor, positive <count> starts the list from top,
    # negative <count> starts the list from bottom.
    blocks(cursor:Cursor, count:Int!):BlockList!

    # Get list of Transactions with at most <count> edges.
    # If <count> is positive, return edges after the cursor,
    # if negative, return edges before the cursor.
    # For undefined cursor, positive <count> starts the list from top,
    # negative <count> starts the list from bottom.
    transactions(cursor:Cursor, count:Int!):TransactionList!

    # Get the id of the current epoch of the Opera blockchain.
    currentEpoch:Long!

    # Get information about specified epoch. Returns current epoch information
    # if id is not provided.
    epoch(id: Long!): Epoch!

    # The last staker id in Opera blockchain.
    lastStakerId: Long!

    # The number of stakers in Opera blockchain.
    stakersNum: Long!

    # Staker information. The staker is loaded either by numeric ID,
    # or by address. null if none is provided.
    staker(id: Long, address: Address): Staker

    # List of staker information from SFC smart contract.
    stakers: [Staker!]!

    # The list of delegations for the given staker ID.
    # Cursor is used to obtain specific slice of the staker's delegations.
    # The most recent delegations are provided if cursor is omitted.
    delegationsOf(staker:Long!, cursor: Cursor, count: Int = 25): DelegationList!

    # Get the details of a specific delegation by it's delegator address
    # and staker the delegation belongs to.
    delegation(address:Address!, staker: Long!): Delegation

    # Get the list of all delegations by it's delegator address.
    delegationsByAddress(address:Address!, cursor: Cursor, count: Int = 25): DelegationList!
}

# Mutation endpoints for modifying the data
type Mutation {
    # SendTransaction submits a raw signed transaction into the block chain.
    # The tx parameter represents raw signed and RLP encoded transaction data.
    sendTransaction(tx: Bytes!):Transaction

    # Validate a deployed contract byte code with the provided source code
    # so potential users can check the contract source code, access contract ABI
    # to be able to interact with the contract and get the right metadata.
    # Returns updated contract information. If the contract can not be validated,
    # it raises a GraphQL error.
    validateContract(contract: ContractValidationInput!): Contract!
}

# Subscriptions to live events broadcasting
type Subscription {
    # Subscribe to receive information about new blocks in the blockchain.
    onBlock: Block!

    # Subscribe to receive information about new transactions in the blockchain.
    onTransaction: Transaction!
}
